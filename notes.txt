Open issues
-----------
(2) Favicon is wrong

(4) Create interface from JS into Pyodide
 - in JS,

(6) Figure out what should be handled in JS vs. Python

(7) Get the revival password through Python

(8) Write validation code in Python

(9) Refactor the reference implementation to be more object oriented and have a clearer API for our purposes - password class, decode method, etc.

(10) ALL of the work for generating a password. That's basically a spike.

(12) Add background color to distinguish keyboard / sections of app, maybe.

(13) Refactor colors in general.

(15) Get rid of HTML / CSS / JS I don't need.

(16) A lot of duplicated code iterating through "sets of 5" rescue symbols ... figure that out.

#19: Change all the `const x = function(...) { ... }` into the more canonical function declarations.


Thoughts
--------
4/23 - You made lots of good progress today. Yeah, your work is built off the ACNH dude. But the JS is your own, even if the layout was largely lifted from him. You're getting a lot better at this; every front end project you do looks better and gets easier. You feel less helpless while debugging, and you try things out more methodically instead of Googling for a solution immediately without fully understanding the problem.

4/25 -- things to write about:
 > it's *super fun* to take someone else's code and strip it down to the minimum that you need. It gives you a lot of insight into how things are coupled and how they designed their app.
 > changing my debugging attitude has been one of the biggest contributors to success on this project. Once I stopped believing that frontend was above my head and that JS made no sense, I stopped artificially limiting my ability to reason about problems.
 > with that said, I still don't really know what I'm doing, so I know there are a lot of pitfalls I've stepped on. Code review would be appreciated.

Things I've learned about frontend:
 * Flexbox is *fucking magical*. MDN docs and [this page](https://developer.mozilla.org/en-US/docs/Web/CSS) both helped.
 * How good the MDN documentation is! I have [modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modulest) loaded up right now, but I've used it for [Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox), [XmlHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest), and lots of [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)
 * How modules work - similar to imports in Python, but some nuances. This [Mozilla Hacks blog post](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/) and [javascript.info](https://javascript.info/import-export) tutorial were helpful.

Update: modules are harder than I thought. Figuring out how to organize my code is challenging me. I think it should be similar to before, but "main" is just the website. Right now, I'm commenting out all the modules stuff and just getting things working.

Structuring code: figure out what has side effects and what doesn't. Drop pure functions into modules. Drop everything else into a `main.js` or something.

There is so much I'm learning about "modern JavaScript," mostly thanks to [javascript.info](https://javascript.info/). There are lots of things that I used to think I knew about JS, like [IIFEs](https://javascript.info/var#iife), which modern JavaScript (thankfully!) renders obsolete. The same reference helped me to understand the differences between `var` and `let` (and why we don't need the former anymore), and so much more.

Code formatters? I'm kind of just winging it.

CORS is another thing that I just *hated* dealing with before. I never fully understood why, but to be honest I never fully *tried* to understand why. In my head, it was (very roughly) "You can't get files from other places because of something called CORS. Sometimes if you change your request, it'll work. This sometimes stops you from reading files from your computer, too." Ouch!

Once again, [javascript.info] explains it quite clearly. Maybe a lack of good, clear explanations contributed to my confusion---but I think the majority of it was caused by a mental attitude


Closed issues
-------------
#1: If you make the screen wider the two rows of 3s don't stay equal length
 - ideal behavior is at large widths it's 2 sets of 3
 - at small widths it's just 6 sets of 5
 - max width on the parent container?
 >> CLOSED: solution was to set max-width

#14: Make "submit" button create a dummy revival password and have it appear on the page
 >> CLOSED: done

#18: Split out revival generator & rescue generator sections
 >> CLOSED: done

#11: On smaller screens, Pelliper's image isn't centered
 >> CLOSED: solution was to set align-items: centered since dialog-box is a flex container

#17: Detach fork from original repo
 >> CLOSED: easy. Create a new repo on Github, set it as the origin locally, and push there.

#3: Merge this repo with the pyodide repo (look at how you did it for the website histories)
 >> CLOSED: pretty easy. After solving #17, I set the new repo as remote `webapp` on the other repo, then did `git fetch git://whatever master:webapp` to put it on a new branch, then `git merge --allow-unrelated-histories webapp` to merge its changes into master, then `git push origin master` to push to the shared repo. Then `git pull` on the new one, and I can sucessfully close my other VS Code window.
 >> https://stackoverflow.com/a/6316468

#5: Figure out how to get the form data from JS to Pyodide
 >> CLOSED: added a symbolsToText function that does it!
